#!/usr/bin/env bash
CHAT_URL="$(grep '^CHAT_URL=' .env | sed -e 's/^CHAT_URL=\(.*\)$/\1/')"
SKIP_CHECK="0"
while [[ $# -gt 0 ]]; do
  key="$1"

  case $key in
  -s | --site)
    UDO_SITE="$2"
    shift # past argument
    shift # past value
    ;;
  -b | --branch)
    UDO_BRANCH="$2"
    shift # past argument
    shift # past value
    ;;
  -i | --image)
    UDO_IMAGE="$2"
    shift # past argument
    shift # past value
    ;;
  --skip-check)
    SKIP_CHECK=1
    shift # past argument
    ;;
  *)
    UDO_USER="$1"
    shift # past argument
    ;;
  esac
done
function show_help() {
  [[ -z "$1" ]] || (echo "$1" && echo "")
  cat <<ENDHELP
  Usage: start-udo [options] <username>

  Options:
    -s, --site <site>      The name of the site in the udo folder, defaults to username
    -b, --branch <branch>  The branch of udo to use, defaults to udo20
    -i, --image <image>    The version of the image to use, defaults to udo20-latest

ENDHELP
}
if [[ -z "$UDO_USER" ]]; then
  show_help "You must pass username to script"
  exit 1
fi
[[ -z "$UDO_SITE" ]] && UDO_SITE=$UDO_USER
[[ -z "$UDO_BRANCH" ]] && UDO_BRANCH="udo20"
[[ -z "$UDO_IMAGE" ]] && UDO_IMAGE="${UDO_BRANCH}-latest"
UDO_HOME=$(getent passwd "$UDO_USER" | cut -d: -f6)
UDO_DIR="$UDO_HOME/udo/$UDO_SITE"
UDO_INSTANCE=blue

if [[ -z "$UDO_HOME" ]] || [[ ! -d "$UDO_HOME" ]]; then
  show_help "Could not find users home directory"
  exit 1
fi

UDO_LIVE_INSTANCE=$(readlink -f "${UDO_DIR}/www" | cut -d/ -f6)
[[ "$UDO_LIVE_INSTANCE" == "blue" ]] && UDO_INSTANCE=green

echo "Version: $UDO_BRANCH"
echo "Site: $UDO_SITE"
echo "User: $UDO_USER"
echo "Dir: $UDO_DIR"
echo "Live Instance: $UDO_LIVE_INSTANCE"
echo "New Instance: $UDO_INSTANCE"

if [[ ! -d ${UDO_DIR}/site/data ]] || [[ ! -f $UDO_DIR/site/plug.json ]] ||
  [[ ! -f $UDO_DIR/site/conf.json ]]; then
  show_help "Could not find data directory ($UDO_DIR/site/data) or config files are missing"
  exit 1
fi

UDO_LIVE_SOCKET="${UDO_DIR}/${UDO_LIVE_INSTANCE}/sock/nginx.sock"
UDO_SOCKET="/home/${UDO_USER}/udo/${UDO_SITE}/${UDO_INSTANCE}/sock/nginx.sock"

DOCKER_IMAGE=$(docker image ls --filter "reference=moddengine/moddengine:${UDO_IMAGE}" | grep -o moddengine/moddengine)
if [[ -z "$DOCKER_IMAGE" ]]; then
  echo "Could not find docker image moddengine/moddengine:${UDO_IMAGE}"
  exit 1
fi

UDO_HOSTNAME="127.0.0.1"
UDO_HOST="http://${UDO_HOSTNAME}"

echo "Website: ${UDO_HOST}"

function curlf() {
  OUTPUT_FILE=$(mktemp)
  # echo "CURL: curl --silent --output $OUTPUT_FILE --write-out \"%{http_code}\" $@" >&2
  HTTP_CODE=$(curl --silent --output $OUTPUT_FILE --write-out "%{http_code}" "$@")
  EXIT_CODE=$?
  if [[ "$EXIT_CODE" != "0" ]]; then
    cat $OUTPUT_FILE
    rm $OUTPUT_FILE
    return $EXIT_CODE;
  fi
  if [[ ${HTTP_CODE} -lt 200 || ${HTTP_CODE} -gt 299 ]] ; then
    >&2 cat "$OUTPUT_FILE"
    rm $OUTPUT_FILE
    return 22
  fi
  cat $OUTPUT_FILE
  rm $OUTPUT_FILE
}

function check_health() {
  echo -n "Checking health"
  local error_msg
  local error
  for i in {1..30}; do
    error_msg=$(curlf --unix-socket "${UDO_SOCKET}" "${UDO_HOST}/~/health/check" -H "X-Forwarded-Proto: https" -H "X-Skip-Redirect: skip")
    error=$?
    [[ "$error" -eq "0" ]] && break
    echo -n "."
    sleep "$(expr 1 + ${i} \* 2)"
  done
  if [ $error -ne 0 ]; then
    error_msg="${error_msg:=Unknown error (CURL: $error)}"
    echo "Health check failed - ${error_msg}"
    JSON=$(cat <<EOF
{"cards":[{"header":{"title":"Udo Website Upgrade Failed","subtitle":"${UDO_HOST}/","imageUrl":"${UDO_HOST}/favicon.ico","imageStyle":"IMAGE"},"sections":[{"widgets":[{"keyValue":{"topLabel":"cPanel Account","content":"${UDO_USER}"}},{"keyValue":{"topLabel":"Udo Site","content":"${UDO_SITE}"}}]},{"widgets":[{"textParagraph":{"text":"<b>Health check failed on new version:</b><br/> - ${error_msg}"}}]}]}]}
EOF
    )
    curl -X POST -H "Content-Type: application/json" -s --data "${JSON}" "${CHAT_URL}" -o /dev/null
    return 2
  fi
  echo "Healthy"
  return 0;
}

function upgrade_check() {
  if [[ ! -S "$UDO_SOCKET" ]] || [[ ! -S "$UDO_LIVE_SOCKET" ]]; then
    echo "Skipping Upgrade comparison - cant find two instances. Should be ($UDO_SOCKET) and ($UDO_LIVE_SOCKET)";
    return 0
  fi;
  docker run --rm --env-file .env \
    -e UDO_USER="${UDO_USER}" -e UDO_SITE="${UDO_SITE}" -e UDO_HOST="${UDO_HOSTNAME}" \
    -v "${UDO_DIR}:/udo" \
    --network udo-net \
    moddengine/upgrade-check:v0.1.3 \
    "/udo/$(echo "${UDO_LIVE_SOCKET}" | cut -d/ -f6-)" \
    "/udo/$(echo "${UDO_SOCKET}" | cut -d/ -f6-)" \
    /
  RESULT=$?
  return $RESULT
}

function stop_container_if_up() {
  local CHECKRUN
    CHECKRUN=$(docker ps -a --filter "name=^${1}\$" | grep -o "${1}")
    [[ "$CHECKRUN" == "${1}" ]] && docker rm -f "${1}" && echo "Stopped container ${1}"
}


sudo -u "$UDO_USER" mkdir -p "${UDO_DIR}"
sudo -u "$UDO_USER" mkdir -p "${UDO_DIR}/backup"
sudo -u "$UDO_USER" mkdir -p "${UDO_DIR}/${UDO_INSTANCE}/cache"
sudo -u "$UDO_USER" mkdir -p "${UDO_DIR}/${UDO_INSTANCE}/sock"
sudo -u "$UDO_USER" mkdir -p "${UDO_DIR}/${UDO_INSTANCE}/www"

echo "<!DOCTYPE html>
<html>
<head>
    <meta http-equiv=\"refresh\" content=\"2\"></meta>
    <title>Please wait a sec...</title>
    <style>
      html, body {height: 100%; width: 100%; background #fff;}
      body {display:flex; align-items: center; justify-content: center;}
    </style>
</head>
<body>
  <h3>Hang on a sec, we are just doing some maintenance....</h3>
</body>
</html>" >"${UDO_DIR}/${UDO_INSTANCE}/www/internal_error503.html"

echo "RequestHeader set X-Forwarded-Proto \"https\" \"expr='on'=='%{HTTPS}'\"
DirectoryIndex disabled
ErrorDocument 503 /internal_error503.html

RewriteEngine On
RewriteCond %{REQUEST_URI} !^/internal_error503.html$ [NC]
RewriteRule ^(.*)$ \"unix:${UDO_DIR}/${UDO_INSTANCE}/sock/nginx.sock|http://%{HTTP_HOST}/\$1\" [P,NE,B=%\ |:]
" |sudo -u "${UDO_USER}" tee "${UDO_DIR}/${UDO_INSTANCE}/www/.htaccess" > /dev/null


DOCKER_USER=$(id -u "$UDO_USER"):$(id -g "$UDO_USER")
BASE_CONTAINER_NAME="${UDO_USER}_${UDO_SITE}"
NEW_CONTAINER_NAME="${BASE_CONTAINER_NAME}_${UDO_INSTANCE}"
if [ "$UDO_INSTANCE" == "green" ]; then
  OLD_CONTAINER_NAME="${BASE_CONTAINER_NAME}_blue"
else
  OLD_CONTAINER_NAME="${BASE_CONTAINER_NAME}_green"
fi

stop_container_if_up "${NEW_CONTAINER_NAME}"

# Start new container
# Remove nginx socket if its still there
[[ -e "${UDO_DIR}/${UDO_INSTANCE}/sock/nginx.sock" ]] && rm -f "${UDO_DIR}/${UDO_INSTANCE}/sock/nginx.sock"
docker run -d --user "$DOCKER_USER" \
         --name "${NEW_CONTAINER_NAME}" \
         --label "au.net.udo.ver=${UDO_BRANCH}" \
         --label "au.net.udo.user=${UDO_USER}" \
         --label "au.net.udo.site=${UDO_SITE}" \
         --label "au.net.udo.upgrade=auto" \
         -v "${UDO_DIR}/site:/moddengine/site/$UDO_SITE" \
         -v "${UDO_DIR}/backup:/moddengine/backup/$UDO_SITE" \
         -v "${UDO_DIR}/${UDO_INSTANCE}/cache/:/moddengine/cache/$UDO_SITE" \
         -v "${UDO_DIR}/${UDO_INSTANCE}/sock/:/run/nginx" \
         -v "${UDO_HOME}/secrets:/moddengine/secrets:ro" \
         -v /var/lib/mysql/:/run/mysql/ \
         --network=udo-net \
         -e ME_SITE="$UDO_SITE" \
         -e ME_INSTANCE="$UDO_INSTANCE" \
         --restart always \
         "moddengine/moddengine:$UDO_IMAGE"
chmod 755 "${UDO_DIR}/${UDO_INSTANCE}/www"
chown "$UDO_USER" "$UDO_DIR/www"
chown "$UDO_USER" "$UDO_DIR/backup"

function make_new_live() {
    ln -fns "${UDO_DIR}/${UDO_INSTANCE}/www" "${UDO_DIR}/www-${UDO_INSTANCE}"
    mv -fT "${UDO_DIR}/www-${UDO_INSTANCE}" "${UDO_DIR}/www"
}

RUN_COUNT=$(docker ps -a --filter "name=^${BASE_CONTAINER_NAME}" | grep -o "${BASE_CONTAINER_NAME}" | wc -l)
if [[ "${RUN_COUNT}" -lt 2 ]]; then
  echo "No existing container found, making this container live"
  make_new_live
  exit 0
fi
if [[ "$SKIP_CHECK" == "0" ]]; then
  check_health # skipping for now - && upgrade_check
  NEW_UDO_IS_OK=$?
  if [ ! "$NEW_UDO_IS_OK" -eq 0 ]; then
    echo "New container is not up, exiting early"
    exit 1
  fi
fi

### Point new container, and stop old one
make_new_live

echo "Stopping and removing up old container"

stop_container_if_up "${BASE_CONTAINER_NAME}"
stop_container_if_up "${OLD_CONTAINER_NAME}"
